// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Entry = exports.Entry = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineEntry()

function defineEntry () {
  Entry.encodingLength = encodingLength
  Entry.encode = encode
  Entry.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.batchIndex)) throw new Error("batchIndex is required")
    var len = encodings.varint.encodingLength(obj.batchIndex)
    length += 1 + len
    if (!defined(obj.blockIndex)) throw new Error("blockIndex is required")
    var len = encodings.varint.encodingLength(obj.blockIndex)
    length += 1 + len
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    var len = encodings.varint.encodingLength(obj.byteLength)
    length += 1 + len
    if (defined(obj.index)) {
      var packedLen = 0
      for (var i = 0; i < obj.index.length; i++) {
        if (!defined(obj.index[i])) continue
        var len = encodings.varint.encodingLength(obj.index[i])
        packedLen += len
      }
      if (packedLen) {
        length += 1 + packedLen + varint.encodingLength(packedLen)
      }
    }
    if (!defined(obj.block)) throw new Error("block is required")
    var len = encodings.bytes.encodingLength(obj.block)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.batchIndex)) throw new Error("batchIndex is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.batchIndex, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.blockIndex)) throw new Error("blockIndex is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.blockIndex, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    buf[offset++] = 24
    encodings.varint.encode(obj.byteLength, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.index)) {
      var packedLen = 0
      for (var i = 0; i < obj.index.length; i++) {
        if (!defined(obj.index[i])) continue
        packedLen += encodings.varint.encodingLength(obj.index[i])
      }
      if (packedLen) {
        buf[offset++] = 34
        varint.encode(packedLen, buf, offset)
        offset += varint.encode.bytes
      }
      for (var i = 0; i < obj.index.length; i++) {
        if (!defined(obj.index[i])) continue
        encodings.varint.encode(obj.index[i], buf, offset)
        offset += encodings.varint.encode.bytes
      }
    }
    if (!defined(obj.block)) throw new Error("block is required")
    buf[offset++] = 42
    encodings.bytes.encode(obj.block, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      batchIndex: 0,
      blockIndex: 0,
      byteLength: 0,
      index: [],
      block: null
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found4 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found4) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.batchIndex = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.blockIndex = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        case 3:
        obj.byteLength = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found2 = true
        break
        case 4:
        var packedEnd = varint.decode(buf, offset)
        offset += varint.decode.bytes
        packedEnd += offset
        while (offset < packedEnd) {
          obj.index.push(encodings.varint.decode(buf, offset))
          offset += encodings.varint.decode.bytes
        }
        break
        case 5:
        obj.block = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found4 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
